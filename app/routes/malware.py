from app.routes import bp
from flask import current_app as app
from app.db.models.malware import Malware
from flask import json, request
from datetime import datetime
from sqlalchemy import or_, exc

@bp.get('/api/1/<_hostname_port>/<_path_query>')
@bp.get('/api/1/<_hostname_port>/')
def is_malware(_hostname_port, _path_query=""):
    additional_query = request.query_string
    if additional_query:
        _path_query = f"{_path_query}?{additional_query.decode('utf-8')}"

    fetch = app.session.query(Malware).filter(
        or_(Malware.url == f"{_hostname_port}",
        Malware.url == f"{_hostname_port}/{_path_query}"),
        Malware.dtime.is_(None)
    ).all()

    data = {'url': f"{_hostname_port}/{_path_query}"}
    if len(fetch) != 0:
        response = Malware._set_return_value(data, False)
        return f"{json.dumps(response)}", 200
    else:
        response = Malware._set_return_value(data, True)
        return f"{json.dumps(response)}", 200


@bp.post('/api/1/add')
def add_malware():
    data = request.get_json()
    fetch = app.session.query(Malware).filter(
        Malware.url == f"{data['url']}",
        Malware.dtime.is_not(None)
    ).all()
    response = Malware._set_return_value(data, False)
    if len(fetch) != 0:
        fetch = fetch[0]
        setattr(fetch, 'dtime', None)
    else:
        newdata = Malware(url=data['url'], dtime=None)
        app.session.add(newdata)
    try:
        app.session.commit()

    except exc.IntegrityError:
        app.session.rollback()
        return f"{json.dumps(response)}", 200
    except Exception as e:
        app.session.rollback()
        return f"ERROR: {e}", 401

    return f"{json.dumps(response)}", 201


@bp.delete('/api/1/delete')
def delete_malware():
    data = request.get_json()
    fetch = app.session.query(Malware).filter(
        Malware.url == f"{data['url']}",
        Malware.dtime.is_(None)
    ).all()
    if not fetch:
        return json.dumps(Malware._set_return_value(data, True)), 200
    fetch = fetch[0]
    setattr(fetch, 'dtime', fetch.dtime or datetime.now())

    try:
        app.session.commit()
    except Exception as e:
        app.session.rollback()
        return f"ERROR: {e}", 401
    return json.dumps(Malware._set_return_value(data, True)), 201


@bp.post('/api/1/createmany')
def bulk_create():
    data = request.get_json()
    createlist = list()
    try:
        for i in data['malware_list']:
            createlist.append({'url': i, 'dtime': None})
    except KeyError:
        return "BAD Request: POST to /createmany request expects malware_list list", 400

    app.session.bulk_insert_mappings(
        Malware, createlist, return_defaults=True)
    try:
        app.session.commit()
        return {'data': createlist}, 201

    except exc.IntegrityError as e:
        app.session.rollback()
        return {'data': createlist}, 200
    except Exception as e:
        # If anything goes wrong, we have to rollback
        app.session.rollback()
        return f"ERROR: {e}", 401
